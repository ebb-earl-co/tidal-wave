name: Pyinstaller Build on Ubuntu for GNU/Linux x86_64
on:
  release:
    types: ["published"]
  push:
    branches: ["develop", "trunk"]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: autoconf build-essential ca-certificates curl gpg gpg-agent pkg-config yasm zlib1g-dev
        version: 1.0

    - name: Build FFmpeg from source
      run: |
        mkdir ffmpeg_sources ffmpeg_build bin
        cd ffmpeg_sources
        curl --output ffmpeg-6.1.1.tar.gz https://ffmpeg.org/releases/ffmpeg-6.1.1.tar.gz
        curl --output ffmpeg-6.1.1.tar.gz.asc https://ffmpeg.org/releases/ffmpeg-6.1.1.tar.gz.asc
        curl -sSL https://ffmpeg.org/ffmpeg-devel.asc | gpg --import -
        gpg --verify ffmpeg-6.1.1.tar.gz.asc ffmpeg-6.1.1.tar.gz
        tar xzf ffmpeg-6.1.1.tar.gz
        cd ffmpeg-6.1.1
        PATH="bin:$PATH" PKG_CONFIG_PATH="ffmpeg_build/lib/pkgconfig" ./configure \
          --prefix="ffmpeg_build" \
          --pkg-config-flags="--static" \
          --extra-cflags="-Iffmpeg_build/include" \
          --extra-ldflags="-Lffmpeg_build/lib" \
          --extra-libs="-lpthread -lm" \
          --ld="g++" \
          --bindir="bin"
        PATH="bin:$PATH" make -j$(nproc)
        make install
        hash -r

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: "pip"  # caching pip dependencies

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip setuptools wheel
        python3 -m pip install pyinstaller

    - name: Create Executable with Pyinstaller
      run: |
        pyinstaller \
          --distpath ./.dist \
          --workpath ./.build \
          --onefile \
          --name tidal-wave_linux \
          --paths tidal_wave \
          --add-data "README.md:." \
          --add-data "bin/ffmpeg:." \
          ./pyinstall.py 
    
    - name: Test just-compiled binary
      run: |
        tidal-wave_linux --help

    - name: Add (upload) artifact to release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        files: tidal-wave_linux
